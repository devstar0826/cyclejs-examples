(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

var Menu = require("./menu");

// APP =============================================================================================
var data = [{ name: "Web Development", price: 300 }, { name: "Design", price: 400 }, { name: "Integration", price: 250 }, { name: "Training", price: 220 }];

var active = ["Web Development", "Integration"];

var View = Cycle.createView(function () {
  return {
    vtree$: Rx.Observable["return"](h("Menu", { items: data, active: active })) };
});

Cycle.createDOMUser("main").inject(View);

},{"./menu":2,"cyclejs":"cyclejs"}],2:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

var makeClass = require("classnames");

// COMPONENTS ======================================================================================
Cycle.registerCustomElement("Menu", function (DOM, Props) {
  var Model = Cycle.createModel(function (Intent, Props) {
    var items$ = Props.get("items$");
    var active$ = Props.get("active$");
    var selectOrUnselect$ = Intent.get("selectOrUnselect$");
    return {
      items$: items$,
      active$: selectOrUnselect$.merge(active$).scan(function (active, clickedName) {
        if (clickedName) {
          if (active.indexOf(clickedName) == -1) {
            // Select
            return active.concat([clickedName]);
          } else {
            // Unselect
            return active.filter(function (name) {
              return name != clickedName;
            });
          }
        } else {
          // Keep current
          return active;
        }
      }) };
  });

  var View = Cycle.createView(function (Model) {
    var items$ = Model.get("items$");
    var active$ = Model.get("active$");
    return {
      vtree$: items$.combineLatest(active$, function (items, active) {
        var totalPrice = items.filter(function (item) {
          return active.indexOf(item.name) != -1;
        }).reduce(function (sum, item) {
          return sum + item.price;
        }, 0);
        return h("div", null, [h("nav", null, [items.map(function (item) {
          return h("div", { attributes: { "data-name": item.name }, key: item.name,
            className: makeClass({ item: true, active: active.indexOf(item.name) != -1 }) }, [item.name, " ", h("b", null, ["$", item.price.toFixed(2)])]);
        }), h("div", null, ["Total: ", h("b", null, ["$", totalPrice.toFixed(2)])])])]);
      }) };
  });

  var Intent = Cycle.createIntent(function (DOM) {
    return {
      selectOrUnselect$: DOM.event$("nav .item", "click").map(function (event) {
        return event.currentTarget.dataset.name;
      }) };
  });

  DOM.inject(View).inject(Model).inject(Intent, Props)[0].inject(DOM);
});

// TODO https://github.com/alexmingoia/jsx-transform/issues/15

},{"classnames":"classnames","cyclejs":"cyclejs"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsImJ1aWxkLzQuMi1tZW51LWZvcm0vc2NyaXB0cy9hcHAuanMiLCJidWlsZC80LjItbWVudS1mb3JtL3NjcmlwdHMvbWVudS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQ0NBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQixFQUFFLEdBQU8sS0FBSyxDQUFkLEVBQUU7SUFBRSxDQUFDLEdBQUksS0FBSyxDQUFWLENBQUM7O0FBQ1YsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7QUFHN0IsSUFBSSxJQUFJLEdBQUcsQ0FDVCxFQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLEVBQ3JDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLEVBQzVCLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLEVBQ2pDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLENBQy9CLENBQUM7O0FBRUYsSUFBSSxNQUFNLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQzs7QUFFaEQsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztTQUFPO0FBQ2pDLFVBQU0sRUFBRSxFQUFFLENBQUMsVUFBVSxVQUFPLENBQzFCLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUN6QyxFQUNGO0NBQUMsQ0FBQyxDQUFDOztBQUVKLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFD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SSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUMzRCxDQUFDO1NBQUEsQ0FDSCxFQUNELENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQ2IsU0FBUyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0RCxDQUFDLENBQ0gsQ0FBQyxDQUNILENBQUMsQ0FDRjtPQUNILENBQUMsRUFFSCxDQUFDO0dBQ0gsQ0FBQyxDQUFDOztBQUVILE1BQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDckMsV0FBTztBQUNMLHVCQUFpQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUNoRCxHQUFHLENBQUMsVUFBQSxLQUFLO2VBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSTtPQUFBLENBQUMsRUFDbEQsQ0FBQztHQUNILENBQUMsQ0FBQzs7QUFFSCxLQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNyRSxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gSU1QT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IEN5Y2xlID0gcmVxdWlyZShcImN5Y2xlanNcIik7XG5sZXQge1J4LCBofSA9IEN5Y2xlO1xubGV0IE1lbnUgPSByZXF1aXJlKFwiLi9tZW51XCIpO1xuXG4vLyBBUFAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgZGF0YSA9IFtcbiAge25hbWU6IFwiV2ViIERldmVsb3BtZW50XCIsIHByaWNlOiAzMDB9LFxuICB7bmFtZTogXCJEZXNpZ25cIiwgcHJpY2U6IDQwMH0sXG4gIHtuYW1lOiBcIkludGVncmF0aW9uXCIsIHByaWNlOiAyNTB9LFxuICB7bmFtZTogXCJUcmFpbmluZ1wiLCBwcmljZTogMjIwfVxuXTtcblxubGV0IGFjdGl2ZSA9IFtcIldlYiBEZXZlbG9wbWVudFwiLCBcIkludGVncmF0aW9uXCJdO1xuXG5sZXQgVmlldyA9IEN5Y2xlLmNyZWF0ZVZpZXcoKCkgPT4gKHtcbiAgdnRyZWUkOiBSeC5PYnNlcnZhYmxlLnJldHVybihcbiAgICBoKCdNZW51Jywge2l0ZW1zOiBkYXRhLCBhY3RpdmU6IGFjdGl2ZX0pXG4gICksXG59KSk7XG5cbkN5Y2xlLmNyZWF0ZURPTVVzZXIoXCJtYWluXCIpLmluamVjdChWaWV3KTsiLCIvLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCB7UngsIGh9ID0gQ3ljbGU7XG5sZXQgbWFrZUNsYXNzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbi8vIENPTVBPTkVOVFMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkN5Y2xlLnJlZ2lzdGVyQ3VzdG9tRWxlbWVudChcIk1lbnVcIiwgKERPTSwgUHJvcHMpID0+IHtcbiAgbGV0IE1vZGVsID0gQ3ljbGUuY3JlYXRlTW9kZWwoKEludGVudCwgUHJvcHMpID0+IHtcbiAgICBsZXQgaXRlbXMkID0gUHJvcHMuZ2V0KFwiaXRlbXMkXCIpO1xuICAgIGxldCBhY3RpdmUkID0gUHJvcHMuZ2V0KFwiYWN0aXZlJFwiKTtcbiAgICBsZXQgc2VsZWN0T3JVbnNlbGVjdCQgPSBJbnRlbnQuZ2V0KFwic2VsZWN0T3JVbnNlbGVjdCRcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW1zJDogaXRlbXMkLFxuICAgICAgYWN0aXZlJDogc2VsZWN0T3JVbnNlbGVjdCQubWVyZ2UoYWN0aXZlJClcbiAgICAgICAgLnNjYW4oKGFjdGl2ZSwgY2xpY2tlZE5hbWUpID0+IHtcbiAgICAgICAgICBpZiAoY2xpY2tlZE5hbWUpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmUuaW5kZXhPZihjbGlja2VkTmFtZSkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gU2VsZWN0XG4gICAgICAgICAgICAgIHJldHVybiBhY3RpdmUuY29uY2F0KFtjbGlja2VkTmFtZV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVW5zZWxlY3RcbiAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZS5maWx0ZXIobmFtZSA9PiBuYW1lICE9IGNsaWNrZWROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gS2VlcCBjdXJyZW50XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgfTtcbiAgfSk7XG5cbiAgbGV0IFZpZXcgPSBDeWNsZS5jcmVhdGVWaWV3KE1vZGVsID0+IHtcbiAgICBsZXQgaXRlbXMkID0gTW9kZWwuZ2V0KFwiaXRlbXMkXCIpO1xuICAgIGxldCBhY3RpdmUkID0gTW9kZWwuZ2V0KFwiYWN0aXZlJFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgdnRyZWUkOiBpdGVtcyQuY29tYmluZUxhdGVzdChhY3RpdmUkLCAoaXRlbXMsIGFjdGl2ZSkgPT4ge1xuICAgICAgICBsZXQgdG90YWxQcmljZSA9IGl0ZW1zXG4gICAgICAgICAgLmZpbHRlcihpdGVtID0+IGFjdGl2ZS5pbmRleE9mKGl0ZW0ubmFtZSkgIT0gLTEpXG4gICAgICAgICAgLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiAoc3VtICsgaXRlbS5wcmljZSksIDApO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGgoJ2RpdicsIG51bGwsIFtcbiAgICAgICAgICAgIGgoJ25hdicsIG51bGwsIFtcbiAgICAgICAgICAgICAgaXRlbXMubWFwKGl0ZW0gPT5cbiAgICAgICAgICAgICAgICBoKCdkaXYnLCB7YXR0cmlidXRlczoge1wiZGF0YS1uYW1lXCI6IGl0ZW0ubmFtZX0sIGtleTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBtYWtlQ2xhc3Moe1wiaXRlbVwiOiB0cnVlLCBhY3RpdmU6IGFjdGl2ZS5pbmRleE9mKGl0ZW0ubmFtZSkgIT0gLTF9KX0sIFtcbiAgICAgICAgICAgICAgICAgIGl0ZW0ubmFtZSwgXCIgXCIsIGgoJ2InLCBudWxsLCBbXCIkXCIsIGl0ZW0ucHJpY2UudG9GaXhlZCgyKV0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgaCgnZGl2JywgbnVsbCwgW1xuICAgICAgICAgICAgICAgIFwiVG90YWw6IFwiLCBoKCdiJywgbnVsbCwgW1wiJFwiLCB0b3RhbFByaWNlLnRvRml4ZWQoMildKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICAvLyBUT0RPIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4bWluZ29pYS9qc3gtdHJhbnNmb3JtL2lzc3Vlcy8xNVxuICAgIH07XG4gIH0pO1xuXG4gIGxldCBJbnRlbnQgPSBDeWNsZS5jcmVhdGVJbnRlbnQoRE9NID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0T3JVbnNlbGVjdCQ6IERPTS5ldmVudCQoXCJuYXYgLml0ZW1cIiwgXCJjbGlja1wiKVxuICAgICAgICAubWFwKGV2ZW50ID0+IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5uYW1lKSxcbiAgICB9O1xuICB9KTtcblxuICBET00uaW5qZWN0KFZpZXcpLmluamVjdChNb2RlbCkuaW5qZWN0KEludGVudCwgUHJvcHMpWzBdLmluamVjdChET00pO1xufSk7Il19
