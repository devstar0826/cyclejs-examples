(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var makeClass = require("classnames");
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// APP =============================================================================================
var Model = Cycle.createModel(function (Intent) {
  var started = Date.now();
  var tickToTimeDelta = function tickToTimeDelta() {
    return Date.now() - started;
  };
  var control$ = Intent.get("control$").startWith(true);
  var stop$ = Intent.get("stop$");
  return {
    msSinceStart$: Rx.Observable.interval(100).map(tickToTimeDelta).pausable(control$).takeUntil(stop$),

    stopped$: stop$.startWith(false) };
});

var View = Cycle.createView(function (Model) {
  return {
    vtree$: Rx.Observable.combineLatest(Model.get("msSinceStart$"), Model.get("stopped$"), function (msSinceStart, stopped) {
      var timeDelta = (msSinceStart / 1000).toFixed(1);
      return h("div", null, [h("p", { className: makeClass({ muted: stopped }) }, ["Started ", timeDelta, " seconds ago ", stopped ? "(Timer stopped)" : ""]), h("div", { className: "btn-group" }, [h("button", { className: "btn btn-default pause", disabled: stopped }, ["Pause"]), h("button", { className: "btn btn-default continue", disabled: stopped }, ["Continue"]), h("button", { className: "btn btn-default stop", disabled: stopped }, ["Stop"])])]);
    }) };
});

var Intent = Cycle.createIntent(function (DOM) {
  return {
    control$: Rx.Observable.merge(DOM.event$(".btn.pause", "click").map(function () {
      return false;
    }), DOM.event$(".btn.continue", "click").map(function () {
      return true;
    })),
    stop$: DOM.event$(".btn.stop", "click") };
});

var DOM = Cycle.createDOMUser("main");

DOM.inject(View).inject(Model).inject(Intent).inject(DOM);

},{"classnames":"classnames","cyclejs":"cyclejs"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsImJ1aWxkLzEuMi10aW1lci1tb3JlL3NjcmlwdHMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FDQ0EsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3RDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQixFQUFFLEdBQU8sS0FBSyxDQUFkLEVBQUU7SUFBRSxDQUFDLEdBQUksS0FBSyxDQUFWLENBQUM7OztBQUdWLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDdEMsTUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLE1BQUksZUFBZSxHQUFHLDJCQUFXO0FBQy9CLFdBQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQTtHQUM1QixDQUFDO0FBQ0YsTUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEQsTUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxTQUFPO0FBQ0wsaUJBQWEsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FDdkMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUNwQixRQUFRLENBQUMsUUFBUSxDQUFDLENBQ2xCLFNBQVMsQ0FBQyxLQUFLLENBQUM7O0FBRW5CLFlBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNqQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDOztBQUVILElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBQSxLQUFLLEVBQUk7QUFDbkMsU0FBTztBQUNMLFVBQU0sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FDakMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUNqRCxVQUFTLFlBQVksRUFBRSxPQUFPLEVBQUU7QUFDOUIsVUFBSSxTQUFTLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pELGFBQ0UsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FDYixDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FDL0MsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsT0FBTyxHQUFHLGlCQUFpQixHQUFHLEVBQUUsQ0FDekUsQ0FBQyxFQUNGLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFDLEVBQUUsQ0FDakMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUMvRSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQ3JGLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxTQUFTLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDOUUsQ0FBQyxDQUNILENBQUMsQ0FDRjtLQUNILENBQ0YsRUFDRixDQUFDO0NBQ0gsQ0FBQyxDQUFDOztBQUVILElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDckMsU0FBTztBQUNMLFlBQVEsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FDM0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQU0sS0FBSztLQUFBLENBQUMsRUFDbEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQU0sSUFBSTtLQUFBLENBQUMsQ0FDckQ7QUFDRCxTQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLEVBQ3hDLENBQUE7Q0FDRixDQUFDLENBQUM7O0FBRUgsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgbWFrZUNsYXNzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCB7UngsIGh9ID0gQ3ljbGU7XG5cbi8vIEFQUCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmxldCBNb2RlbCA9IEN5Y2xlLmNyZWF0ZU1vZGVsKEludGVudCA9PiB7XG4gIGxldCBzdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgbGV0IHRpY2tUb1RpbWVEZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpIC0gc3RhcnRlZFxuICB9O1xuICBsZXQgY29udHJvbCQgPSBJbnRlbnQuZ2V0KFwiY29udHJvbCRcIikuc3RhcnRXaXRoKHRydWUpO1xuICBsZXQgc3RvcCQgPSBJbnRlbnQuZ2V0KFwic3RvcCRcIik7XG4gIHJldHVybiB7XG4gICAgbXNTaW5jZVN0YXJ0JDogUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDApXG4gICAgICAubWFwKHRpY2tUb1RpbWVEZWx0YSlcbiAgICAgIC5wYXVzYWJsZShjb250cm9sJClcbiAgICAgIC50YWtlVW50aWwoc3RvcCQpLFxuXG4gICAgc3RvcHBlZCQ6IHN0b3AkLnN0YXJ0V2l0aChmYWxzZSksXG4gIH07XG59KTtcblxubGV0IFZpZXcgPSBDeWNsZS5jcmVhdGVWaWV3KE1vZGVsID0+IHtcbiAgcmV0dXJuIHtcbiAgICB2dHJlZSQ6IFJ4Lk9ic2VydmFibGUuY29tYmluZUxhdGVzdChcbiAgICAgIE1vZGVsLmdldChcIm1zU2luY2VTdGFydCRcIiksIE1vZGVsLmdldChcInN0b3BwZWQkXCIpLFxuICAgICAgZnVuY3Rpb24obXNTaW5jZVN0YXJ0LCBzdG9wcGVkKSB7XG4gICAgICAgIGxldCB0aW1lRGVsdGEgPSAobXNTaW5jZVN0YXJ0IC8gMTAwMCkudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBoKCdkaXYnLCBudWxsLCBbXG4gICAgICAgICAgICBoKCdwJywge2NsYXNzTmFtZTogbWFrZUNsYXNzKHttdXRlZDogc3RvcHBlZH0pfSwgW1xuICAgICAgICAgICAgICBcIlN0YXJ0ZWQgXCIsIHRpbWVEZWx0YSwgXCIgc2Vjb25kcyBhZ28gXCIsIHN0b3BwZWQgPyBcIihUaW1lciBzdG9wcGVkKVwiIDogXCJcIlxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBoKCdkaXYnLCB7Y2xhc3NOYW1lOiBcImJ0bi1ncm91cFwifSwgW1xuICAgICAgICAgICAgICBoKCdidXR0b24nLCB7Y2xhc3NOYW1lOiBcImJ0biBidG4tZGVmYXVsdCBwYXVzZVwiLCBkaXNhYmxlZDogc3RvcHBlZH0sIFtcIlBhdXNlXCJdKSxcbiAgICAgICAgICAgICAgaCgnYnV0dG9uJywge2NsYXNzTmFtZTogXCJidG4gYnRuLWRlZmF1bHQgY29udGludWVcIiwgZGlzYWJsZWQ6IHN0b3BwZWR9LCBbXCJDb250aW51ZVwiXSksXG4gICAgICAgICAgICAgIGgoJ2J1dHRvbicsIHtjbGFzc05hbWU6IFwiYnRuIGJ0bi1kZWZhdWx0IHN0b3BcIiwgZGlzYWJsZWQ6IHN0b3BwZWR9LCBbXCJTdG9wXCJdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICksXG4gIH07XG59KTtcblxubGV0IEludGVudCA9IEN5Y2xlLmNyZWF0ZUludGVudChET00gPT4ge1xuICByZXR1cm4ge1xuICAgIGNvbnRyb2wkOiBSeC5PYnNlcnZhYmxlLm1lcmdlKFxuICAgICAgRE9NLmV2ZW50JChcIi5idG4ucGF1c2VcIiwgXCJjbGlja1wiKS5tYXAoKCkgPT4gZmFsc2UpLFxuICAgICAgRE9NLmV2ZW50JChcIi5idG4uY29udGludWVcIiwgXCJjbGlja1wiKS5tYXAoKCkgPT4gdHJ1ZSlcbiAgICApLFxuICAgIHN0b3AkOiBET00uZXZlbnQkKFwiLmJ0bi5zdG9wXCIsIFwiY2xpY2tcIiksXG4gIH1cbn0pO1xuXG5sZXQgRE9NID0gQ3ljbGUuY3JlYXRlRE9NVXNlcihcIm1haW5cIik7XG5cbkRPTS5pbmplY3QoVmlldykuaW5qZWN0KE1vZGVsKS5pbmplY3QoSW50ZW50KS5pbmplY3QoRE9NKTsiXX0=
