(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

require("./shims");

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Model = require("./model");
var View = require("./view");
var Intent = require("./intent");

// APP =============================================================================================
var DOM = Cycle.createDOMUser("main");

DOM.inject(View).inject(Model).inject(Intent).inject(DOM);

},{"./intent":2,"./model":3,"./shims":4,"./view":5,"cyclejs":"cyclejs"}],2:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Intent = Cycle.createIntent(function (DOM) {
  return {
    changeQuery$: DOM.event$(".query", "input").map(function (event) {
      return event.target.value.trim().toLowerCase();
    }) };
});

module.exports = Intent;

},{"cyclejs":"cyclejs"}],3:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Model = Cycle.createModel(function (Intent) {
  return {
    query$: Intent.get("changeQuery$").startWith(""),

    data$: Rx.Observable["return"]([{ name: "Angular", url: "https://angularjs.org/" }, { name: "Backbone", url: "http://documentcloud.github.io/backbone/" }, { name: "Cycle", url: "https://github.com/staltz/cycle" }, { name: "Dojo", url: "http://dojotoolkit.org/" }, { name: "Ember", url: "http://emberjs.com/" }, { name: "Express", url: "http://expressjs.com/" }, { name: "jQuery", url: "http://jquery.com/" }, { name: "Knockout.js", url: "http://knockoutjs.com/" }, { name: "Koa", url: "http://koajs.com/" }, { name: "Lodash", url: "http://lodash.com/" }, { name: "Moment", url: "http://momentjs.com/" }, { name: "Mootools", url: "http://mootools.net/" }, { name: "Prototype", url: "http://www.prototypejs.org/" }, { name: "React", url: "http://facebook.github.io/react/" }, { name: "Underscore", url: "http://documentcloud.github.io/underscore/" }]) };
});

module.exports = Model;

},{"cyclejs":"cyclejs"}],4:[function(require,module,exports){
"use strict";

require("object.assign").shim();

console.error = console.log;

},{"object.assign":"object.assign"}],5:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// EXPORTS =========================================================================================
var View = Cycle.createView(function (Model) {
  var query$ = Model.get("query$");
  var data$ = Model.get("data$");
  return {
    vtree$: data$.combineLatest(query$, function (data, query) {
      var items = query ? data.filter(function (obj) {
        return obj.name.toLowerCase().match(query);
      }) : data;
      return h("div", null, [h("input", { className: "query", type: "text", value: query, placeholder: "Type here" }), h("ul", null, [items.map(function (obj) {
        return h("li", null, [obj.name, " ", h("a", { href: obj.url }, [obj.name])]);
      })])]);
    }) };
});

module.exports = View;

},{"cyclejs":"cyclejs"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsImJ1aWxkLzUuMS1zZWFyY2gtY2xpZW50L3NjcmlwdHMvYXBwLmpzIiwiYnVpbGQvNS4xLXNlYXJjaC1jbGllbnQvc2NyaXB0cy9pbnRlbnQuanMiLCJidWlsZC81LjEtc2VhcmNoLWNsaWVudC9zY3JpcHRzL21vZGVsLmpzIiwiYnVpbGQvNS4xLXNlYXJjaC1jbGllbnQvc2NyaXB0cy9zaGltcy5qcyIsImJ1aWxkLzUuMS1zZWFyY2gtY2xpZW50L3NjcmlwdHMvdmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7QUFHbkIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7QUFHakMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7O0FDVjFELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQixFQUFFLEdBQUksS0FBSyxDQUFYLEVBQUU7OztBQUdQLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBQSxHQUFHLEVBQUk7QUFDckMsU0FBTztB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SztBQUNuRCxVQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEdBQUc7ZUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7T0FBQSxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQ25GLGFBQ0UsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FDYixDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBQyxDQUFDLEVBQ3RGLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ1osS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUc7ZUFDWCxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUFBLENBQ3BFLENBQ0YsQ0FBQyxDQUNILENBQUMsQ0FDRjtLQUNILENBQUMsRUFDSCxDQUFDO0NBQ0gsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInJlcXVpcmUoXCIuL3NoaW1zXCIpO1xuXG4vLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCBNb2RlbCA9IHJlcXVpcmUoXCIuL21vZGVsXCIpO1xubGV0IFZpZXcgPSByZXF1aXJlKFwiLi92aWV3XCIpO1xubGV0IEludGVudCA9IHJlcXVpcmUoXCIuL2ludGVudFwiKTtcblxuLy8gQVBQID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IERPTSA9IEN5Y2xlLmNyZWF0ZURPTVVzZXIoXCJtYWluXCIpO1xuXG5ET00uaW5qZWN0KFZpZXcpLmluamVjdChNb2RlbCkuaW5qZWN0KEludGVudCkuaW5qZWN0KERPTSk7IiwiLy8gSU1QT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IEN5Y2xlID0gcmVxdWlyZShcImN5Y2xlanNcIik7XG5sZXQge1J4fSA9IEN5Y2xlO1xuXG4vLyBFWFBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgSW50ZW50ID0gQ3ljbGUuY3JlYXRlSW50ZW50KERPTSA9PiB7XG4gIHJldHVybiB7XG4gICAgY2hhbmdlUXVlcnkkOiBET00uZXZlbnQkKFwiLnF1ZXJ5XCIsIFwiaW5wdXRcIilcbiAgICAgIC5tYXAoZXZlbnQgPT4gZXZlbnQudGFyZ2V0LnZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpKSxcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVudDsiLCIvLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCB7Unh9ID0gQ3ljbGU7XG5cbi8vIEVYUE9SVFMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmxldCBNb2RlbCA9IEN5Y2xlLmNyZWF0ZU1vZGVsKChJbnRlbnQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBxdWVyeSQ6IEludGVudC5nZXQoXCJjaGFuZ2VRdWVyeSRcIikuc3RhcnRXaXRoKFwiXCIpLFxuXG4gICAgZGF0YSQ6IFJ4Lk9ic2VydmFibGUucmV0dXJuKFtcbiAgICAgIHtuYW1lOiBcIkFuZ3VsYXJcIiwgdXJsOiBcImh0dHBzOi8vYW5ndWxhcmpzLm9yZy9cIn0sXG4gICAgICB7bmFtZTogXCJCYWNrYm9uZVwiLCB1cmw6IFwiaHR0cDovL2RvY3VtZW50Y2xvdWQuZ2l0aHViLmlvL2JhY2tib25lL1wifSxcbiAgICAgIHtuYW1lOiBcIkN5Y2xlXCIsIHVybDogXCJodHRwczovL2dpdGh1Yi5jb20vc3RhbHR6L2N5Y2xlXCJ9LFxuICAgICAge25hbWU6IFwiRG9qb1wiLCB1cmw6IFwiaHR0cDovL2Rvam90b29sa2l0Lm9yZy9cIn0sXG4gICAgICB7bmFtZTogXCJFbWJlclwiLCB1cmw6IFwiaHR0cDovL2VtYmVyanMuY29tL1wifSxcbiAgICAgIHtuYW1lOiBcIkV4cHJlc3NcIiwgdXJsOiBcImh0dHA6Ly9leHByZXNzanMuY29tL1wifSxcbiAgICAgIHtuYW1lOiBcImpRdWVyeVwiLCB1cmw6IFwiaHR0cDovL2pxdWVyeS5jb20vXCJ9LFxuICAgICAge25hbWU6IFwiS25vY2tvdXQuanNcIiwgdXJsOiBcImh0dHA6Ly9rbm9ja291dGpzLmNvbS9cIn0sXG4gICAgICB7bmFtZTogXCJLb2FcIiwgdXJsOiBcImh0dHA6Ly9rb2Fqcy5jb20vXCJ9LFxuICAgICAge25hbWU6IFwiTG9kYXNoXCIsIHVybDogXCJodHRwOi8vbG9kYXNoLmNvbS9cIn0sXG4gICAgICB7bmFtZTogXCJNb21lbnRcIiwgdXJsOiBcImh0dHA6Ly9tb21lbnRqcy5jb20vXCJ9LFxuICAgICAge25hbWU6IFwiTW9vdG9vbHNcIiwgdXJsOiBcImh0dHA6Ly9tb290b29scy5uZXQvXCJ9LFxuICAgICAge25hbWU6IFwiUHJvdG90eXBlXCIsIHVybDogXCJodHRwOi8vd3d3LnByb3RvdHlwZWpzLm9yZy9cIn0sXG4gICAgICB7bmFtZTogXCJSZWFjdFwiLCB1cmw6IFwiaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9cIn0sXG4gICAgICB7bmFtZTogXCJVbmRlcnNjb3JlXCIsIHVybDogXCJodHRwOi8vZG9jdW1lbnRjbG91ZC5naXRodWIuaW8vdW5kZXJzY29yZS9cIn0sXG4gICAgXSksXG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlbDsiLCJyZXF1aXJlKFwib2JqZWN0LmFzc2lnblwiKS5zaGltKCk7XG5cbmNvbnNvbGUuZXJyb3IgPSBjb25zb2xlLmxvZzsiLCIvLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCB7UngsIGh9ID0gQ3ljbGU7XG5cbi8vIEVYUE9SVFMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmxldCBWaWV3ID0gQ3ljbGUuY3JlYXRlVmlldyhNb2RlbCA9PiB7XG4gIGxldCBxdWVyeSQgPSBNb2RlbC5nZXQoXCJxdWVyeSRcIik7XG4gIGxldCBkYXRhJCA9IE1vZGVsLmdldChcImRhdGEkXCIpO1xuICByZXR1cm4ge1xuICAgIHZ0cmVlJDogZGF0YSQuY29tYmluZUxhdGVzdChxdWVyeSQsIChkYXRhLCBxdWVyeSkgPT4ge1xuICAgICAgbGV0IGl0ZW1zID0gcXVlcnkgPyBkYXRhLmZpbHRlcihvYmogPT4gb2JqLm5hbWUudG9Mb3dlckNhc2UoKS5tYXRjaChxdWVyeSkpIDogZGF0YTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGgoJ2RpdicsIG51bGwsIFtcbiAgICAgICAgICBoKCdpbnB1dCcsIHtjbGFzc05hbWU6IFwicXVlcnlcIiwgdHlwZTogXCJ0ZXh0XCIsIHZhbHVlOiBxdWVyeSwgcGxhY2Vob2xkZXI6IFwiVHlwZSBoZXJlXCJ9KSxcbiAgICAgICAgICBoKCd1bCcsIG51bGwsIFtcbiAgICAgICAgICAgIGl0ZW1zLm1hcChvYmogPT5cbiAgICAgICAgICAgICAgaCgnbGknLCBudWxsLCBbb2JqLm5hbWUsIFwiIFwiLCBoKCdhJywge2hyZWY6IG9iai51cmx9LCBbb2JqLm5hbWVdKV0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSksXG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3OyJdfQ==
