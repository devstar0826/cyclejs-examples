(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/app.js":[function(require,module,exports){
"use strict";

require("./shims");

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Model = require("./model");
var View = require("./view");
var Intent = require("./intent");

// APP =============================================================================================
var DOM = Cycle.createDOMUser("main");

DOM.inject(View).inject(Model).inject(Intent).inject(DOM);

},{"./intent":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/intent.js","./model":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/model.js","./shims":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/shims.js","./view":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/view.js","cyclejs":"cyclejs"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/footer.js":[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// ELEMENTS ========================================================================================
Cycle.registerCustomElement("footer", function (User) {
  var View = Cycle.createView(function () {
    return {
      vtree$: Rx.Observable["return"](h("div", null, ["=== footer ==="]))
    };
  });

  User.inject(View);
});

},{"cyclejs":"cyclejs"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/intent.js":[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Intent = Cycle.createIntent(function (DOM) {
  return {
    add$: DOM.event$(".add", "click").map(function (event) {
      return 1;
    }),
    remove$: DOM.event$(".item", "remove").map(function (event) {
      return event.data;
    }),
    changeWidth$: DOM.event$(".item", "changeWidth").map(function (event) {
      return event.data;
    }),
    changeColor$: DOM.event$(".item", "changeColor").map(function (event) {
      return event.data;
    }) };
});

module.exports = Intent;

},{"cyclejs":"cyclejs"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/item.js":[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// ELEMENTS ========================================================================================
Cycle.registerCustomElement("item", function (DOM, Props) {
  var View = Cycle.createView(function (Model) {
    var id$ = Model.get("id$");
    var width$ = Model.get("width$");
    var color$ = Model.get("color$");
    return {
      vtree$: Rx.Observable.combineLatest(id$, width$, color$, function (id, width, color) {
        return h("div", { className: "item", style: { width: width + "px", backgroundColor: color } }, [h("div", null, [h("input", { className: "width-slider", type: "range", min: "200", max: "1000", value: width })]), h("div", null, [h("input", { className: "color-input", type: "text", value: color })]), h("button", { className: "remove" }, ["Remove"])]);
      }) };
  });

  var Model = Cycle.createModel(function (Intent, Props) {
    return {
      id$: Props.get("id$").shareReplay(1),
      width$: Props.get("width$"),
      color$: Props.get("color$") };
  });

  var Intent = Cycle.createIntent(function (DOM) {
    return {
      changeWidth$: DOM.event$(".width-slider", "input").map(function (event) {
        return parseInt(event.target.value);
      }),
      changeColor$: DOM.event$(".color-input", "input").map(function (event) {
        return event.target.value;
      }),
      remove$: DOM.event$(".remove", "click").map(function (event) {
        return true;
      }) };
  });

  DOM.inject(View).inject(Model).inject(Intent, Props)[0].inject(DOM);

  return {
    changeWidth$: Intent.get("changeWidth$").withLatestFrom(Model.get("id$"), function (width, id) {
      return { id: id, width: width };
    }),

    changeColor$: Intent.get("changeColor$").withLatestFrom(Model.get("id$"), function (color, id) {
      return { id: id, color: color };
    }),

    remove$: Intent.get("remove$").withLatestFrom(Model.get("id$"), function (_, id) {
      return id;
    }) };
});

},{"cyclejs":"cyclejs"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/model.js":[function(require,module,exports){
"use strict";

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

// IMPORTS =========================================================================================
var uuid = require("node-uuid");
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Model = Cycle.createModel(function (Intent) {
  var add$ = Intent.get("add$").map(function () {
    return function transform(state) {
      var model = createRandom();
      var state = Object.assign({}, state);
      state[model.id] = model;
      return state;
    };
  });

  var remove$ = Intent.get("remove$").map(function (id) {
    return function transform(state) {
      var state = Object.assign({}, state);
      delete state[id];
      return state;
    };
  });

  var changeWidth$ = Intent.get("changeWidth$").map(function (model) {
    return function transform(state) {
      state[model.id].width = model.width;
      return state;
    };
  });

  var changeColor$ = Intent.get("changeColor$").map(function (model) {
    return function (state) {
      state[model.id].color = model.color;
      return state;
    };
  });

  var transforms = Rx.Observable.merge(add$, remove$, changeColor$, changeWidth$);

  return {
    state$: transforms.startWith(seedState()).scan(function (state, transform) {
      return transform(state);
    })
  };
});

function createRandom(withData) {
  return Object.assign({
    id: uuid.v4(),
    width: Math.floor(Math.random() * 800 + 200),
    color: "#" + Math.random().toString(16).substr(-6) }, withData);
}

function seedState() {
  var model = createRandom();
  var state = _defineProperty({}, model.id, model);
  return state;
}

module.exports = Model;

},{"cyclejs":"cyclejs","node-uuid":"node-uuid"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/shims.js":[function(require,module,exports){
"use strict";

require("object.assign").shim();

console.error = console.log;

},{"object.assign":"object.assign"}],"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/view.js":[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var sortBy = require("lodash.sortby");
var values = require("lodash.values");
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

var Footer = require("./footer");
var Item = require("./item");

// EXPORTS =========================================================================================
var View = Cycle.createView(function (Model) {
  var state$ = Model.get("state$");
  return {
    vtree$: state$.map(function (models) {
      return h("div", { className: "everything" }, [h("div", { className: "topButtons" }, [h("button", { className: "add" }, ["Add Random"])]), h("div", null, [sortBy(values(models), function (model) {
        return model.id;
      }).map(function (model) {
        return h("Item.item", { id: model.id, width: model.width, color: model.color, key: model.id });
      })]), h("Footer")]);
    }) };
});

module.exports = View;

},{"./footer":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/footer.js","./item":"/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/item.js","cyclejs":"cyclejs","lodash.sortby":"lodash.sortby","lodash.values":"lodash.values"}]},{},["/Users/ivankleshnin/JavaScript/cyclejs-examples/build/3.4-slider-colors/app.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC8zLjQtc2xpZGVyLWNvbG9ycy9hcHAuanMiLCJidWlsZC8zLjQtc2xpZGVyLWNvbG9ycy9mb290ZXIuanMiLCJidWlsZC8zLjQtc2xpZGVyLWNvbG9ycy9pbnRlbnQuanMiLCJidWlsZC8zLjQtc2xpZGVyLWNvbG9ycy9pdGVtLmpzIiwiYnVpbGQvMy40LXNsaWRlci1jb2xvcnMvbW9kZWwuanMiLCJidWlsZC8zLjQtc2xpZGVyLWNvbG9ycy9zaGltcy5qcyIsImJ1aWxkLzMuNC1zbGlkZXItY29sb3JzL3ZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQzs7O0FBR25CLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzs7O0FBR2pDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXRDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7OztBQ1YxRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUIsRUFBRSxHQUFPLEtBQUssQ0FBZCxFQUFFO0lBQUUsQ0FBQyxHQUFJLEtB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QUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLLEVBQUk7QUFDckQsZUFBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO09BQzlGLENBQUMsQ0FDSCxDQUFDLEVBQ0YsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUNaLENBQUMsQ0FDRjtLQUNILENBQUMsRUFDSCxDQUFDO0NBQ0gsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInJlcXVpcmUoXCIuL3NoaW1zXCIpO1xuXG4vLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCBNb2RlbCA9IHJlcXVpcmUoXCIuL21vZGVsXCIpO1xubGV0IFZpZXcgPSByZXF1aXJlKFwiLi92aWV3XCIpO1xubGV0IEludGVudCA9IHJlcXVpcmUoXCIuL2ludGVudFwiKTtcblxuLy8gQVBQID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IERPTSA9IEN5Y2xlLmNyZWF0ZURPTVVzZXIoXCJtYWluXCIpO1xuXG5ET00uaW5qZWN0KFZpZXcpLmluamVjdChNb2RlbCkuaW5qZWN0KEludGVudCkuaW5qZWN0KERPTSk7IiwiLy8gSU1QT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IEN5Y2xlID0gcmVxdWlyZShcImN5Y2xlanNcIik7XG5sZXQge1J4LCBofSA9IEN5Y2xlO1xuXG4vLyBFTEVNRU5UUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5DeWNsZS5yZWdpc3RlckN1c3RvbUVsZW1lbnQoXCJmb290ZXJcIiwgZnVuY3Rpb24oVXNlcikge1xuICBsZXQgVmlldyA9IEN5Y2xlLmNyZWF0ZVZpZXcoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZ0cmVlJDogUnguT2JzZXJ2YWJsZS5yZXR1cm4oXG4gICAgICAgIGgoJ2RpdicsIG51bGwsIFtcIj09PSBmb290ZXIgPT09XCJdKVxuICAgICAgKVxuICAgIH07XG4gIH0pO1xuXG4gIFVzZXIuaW5qZWN0KFZpZXcpO1xufSk7IiwiLy8gSU1QT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IEN5Y2xlID0gcmVxdWlyZShcImN5Y2xlanNcIik7XG5sZXQge1J4fSA9IEN5Y2xlO1xuXG4vLyBFWFBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgSW50ZW50ID0gQ3ljbGUuY3JlYXRlSW50ZW50KERPTSA9PiB7XG4gIHJldHVybiB7XG4gICAgYWRkJDogRE9NLmV2ZW50JChcIi5hZGRcIiwgXCJjbGlja1wiKS5tYXAoZXZlbnQgPT4gMSksXG4gICAgcmVtb3ZlJDogRE9NLmV2ZW50JChcIi5pdGVtXCIsIFwicmVtb3ZlXCIpLm1hcChldmVudCA9PiBldmVudC5kYXRhKSxcbiAgICBjaGFuZ2VXaWR0aCQ6IERPTS5ldmVudCQoXCIuaXRlbVwiLCBcImNoYW5nZVdpZHRoXCIpLm1hcChldmVudCA9PiBldmVudC5kYXRhKSxcbiAgICBjaGFuZ2VDb2xvciQ6IERPTS5ldmVudCQoXCIuaXRlbVwiLCBcImNoYW5nZUNvbG9yXCIpLm1hcChldmVudCA9PiBldmVudC5kYXRhKSxcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVudDsiLCIvLyBJTVBPUlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5sZXQgQ3ljbGUgPSByZXF1aXJlKFwiY3ljbGVqc1wiKTtcbmxldCB7UngsIGh9ID0gQ3ljbGU7XG5cbi8vIEVMRU1FTlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkN5Y2xlLnJlZ2lzdGVyQ3VzdG9tRWxlbWVudChcIml0ZW1cIiwgKERPTSwgUHJvcHMpID0+IHtcbiAgbGV0IFZpZXcgPSBDeWNsZS5jcmVhdGVWaWV3KE1vZGVsID0+IHtcbiAgICBsZXQgaWQkID0gTW9kZWwuZ2V0KFwiaWQkXCIpO1xuICAgIGxldCB3aWR0aCQgPSBNb2RlbC5nZXQoXCJ3aWR0aCRcIik7XG4gICAgbGV0IGNvbG9yJCA9IE1vZGVsLmdldChcImNvbG9yJFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgdnRyZWUkOiBSeC5PYnNlcnZhYmxlLmNvbWJpbmVMYXRlc3QoaWQkLCB3aWR0aCQsIGNvbG9yJCwgKGlkLCB3aWR0aCwgY29sb3IpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaCgnZGl2Jywge2NsYXNzTmFtZTogXCJpdGVtXCIsIHN0eWxlOiB7d2lkdGg6IHdpZHRoICsgXCJweFwiLCBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yfX0sIFtcbiAgICAgICAgICAgICAgaCgnZGl2JywgbnVsbCwgW1xuICAgICAgICAgICAgICAgIGgoJ2lucHV0Jywge2NsYXNzTmFtZTogXCJ3aWR0aC1zbGlkZXJcIiwgdHlwZTogXCJyYW5nZVwiLCBtaW46IFwiMjAwXCIsIG1heDogXCIxMDAwXCIsIHZhbHVlOiB3aWR0aH0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBoKCdkaXYnLCBudWxsLCBbXG4gICAgICAgICAgICAgICAgaCgnaW5wdXQnLCB7Y2xhc3NOYW1lOiBcImNvbG9yLWlucHV0XCIsIHR5cGU6IFwidGV4dFwiLCB2YWx1ZTogY29sb3J9KVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgaCgnYnV0dG9uJywge2NsYXNzTmFtZTogXCJyZW1vdmVcIn0sIFtcIlJlbW92ZVwiXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKSxcbiAgICB9O1xuICB9KTtcblxuICBsZXQgTW9kZWwgPSBDeWNsZS5jcmVhdGVNb2RlbCgoSW50ZW50LCBQcm9wcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZCQ6IFByb3BzLmdldChcImlkJFwiKS5zaGFyZVJlcGxheSgxKSxcbiAgICAgIHdpZHRoJDogUHJvcHMuZ2V0KFwid2lkdGgkXCIpLFxuICAgICAgY29sb3IkOiBQcm9wcy5nZXQoXCJjb2xvciRcIiksXG4gICAgfTtcbiAgfSk7XG5cbiAgbGV0IEludGVudCA9IEN5Y2xlLmNyZWF0ZUludGVudChET00gPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjaGFuZ2VXaWR0aCQ6IERPTS5ldmVudCQoXCIud2lkdGgtc2xpZGVyXCIsIFwiaW5wdXRcIikubWFwKGV2ZW50ID0+IHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSkpLFxuICAgICAgY2hhbmdlQ29sb3IkOiBET00uZXZlbnQkKFwiLmNvbG9yLWlucHV0XCIsIFwiaW5wdXRcIikubWFwKGV2ZW50ID0+IGV2ZW50LnRhcmdldC52YWx1ZSksXG4gICAgICByZW1vdmUkOiBET00uZXZlbnQkKFwiLnJlbW92ZVwiLCBcImNsaWNrXCIpLm1hcChldmVudCA9PiB0cnVlKSxcbiAgICB9O1xuICB9KTtcblxuICBET00uaW5qZWN0KFZpZXcpLmluamVjdChNb2RlbCkuaW5qZWN0KEludGVudCwgUHJvcHMpWzBdLmluamVjdChET00pO1xuXG4gIHJldHVybiB7XG4gICAgY2hhbmdlV2lkdGgkOiBJbnRlbnQuZ2V0KFwiY2hhbmdlV2lkdGgkXCIpXG4gICAgICAud2l0aExhdGVzdEZyb20oTW9kZWwuZ2V0KFwiaWQkXCIpLCAod2lkdGgsIGlkKSA9PiAoe2lkLCB3aWR0aH0pKSxcblxuICAgIGNoYW5nZUNvbG9yJDogSW50ZW50LmdldChcImNoYW5nZUNvbG9yJFwiKVxuICAgICAgLndpdGhMYXRlc3RGcm9tKE1vZGVsLmdldChcImlkJFwiKSwgKGNvbG9yLCBpZCkgPT4gKHtpZCwgY29sb3J9KSksXG5cbiAgICByZW1vdmUkOiBJbnRlbnQuZ2V0KFwicmVtb3ZlJFwiKVxuICAgICAgLndpdGhMYXRlc3RGcm9tKE1vZGVsLmdldChcImlkJFwiKSwgKF8sIGlkKSA9PiBpZCksXG4gIH07XG59KTtcbiIsIi8vIElNUE9SVFMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmxldCB1dWlkID0gcmVxdWlyZShcIm5vZGUtdXVpZFwiKTtcbmxldCBDeWNsZSA9IHJlcXVpcmUoXCJjeWNsZWpzXCIpO1xubGV0IHtSeH0gPSBDeWNsZTtcblxuLy8gRVhQT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IE1vZGVsID0gQ3ljbGUuY3JlYXRlTW9kZWwoSW50ZW50ID0+IHtcbiAgbGV0IGFkZCQgPSBJbnRlbnQuZ2V0KFwiYWRkJFwiKS5tYXAoKCkgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiB0cmFuc2Zvcm0oc3RhdGUpIHtcbiAgICAgIGxldCBtb2RlbCA9IGNyZWF0ZVJhbmRvbSgpO1xuICAgICAgbGV0IHN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpO1xuICAgICAgc3RhdGVbbW9kZWwuaWRdID0gbW9kZWw7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiAgfSk7XG5cbiAgbGV0IHJlbW92ZSQgPSBJbnRlbnQuZ2V0KFwicmVtb3ZlJFwiKS5tYXAoaWQgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiB0cmFuc2Zvcm0oc3RhdGUpIHtcbiAgICAgIGxldCBzdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKTtcbiAgICAgIGRlbGV0ZSBzdGF0ZVtpZF07XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiAgfSk7XG5cbiAgbGV0IGNoYW5nZVdpZHRoJCA9IEludGVudC5nZXQoXCJjaGFuZ2VXaWR0aCRcIikubWFwKG1vZGVsID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gdHJhbnNmb3JtKHN0YXRlKSB7XG4gICAgICBzdGF0ZVttb2RlbC5pZF0ud2lkdGggPSBtb2RlbC53aWR0aDtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9O1xuICB9KTtcblxuICBsZXQgY2hhbmdlQ29sb3IkID0gSW50ZW50LmdldChcImNoYW5nZUNvbG9yJFwiKS5tYXAobW9kZWwgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgc3RhdGVbbW9kZWwuaWRdLmNvbG9yID0gbW9kZWwuY29sb3I7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcbiAgfSk7XG5cbiAgbGV0IHRyYW5zZm9ybXMgPSBSeC5PYnNlcnZhYmxlLm1lcmdlKFxuICAgIGFkZCQsXG4gICAgcmVtb3ZlJCxcbiAgICBjaGFuZ2VDb2xvciQsXG4gICAgY2hhbmdlV2lkdGgkXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0ZSQ6IHRyYW5zZm9ybXNcbiAgICAgIC5zdGFydFdpdGgoc2VlZFN0YXRlKCkpXG4gICAgICAuc2NhbihmdW5jdGlvbihzdGF0ZSwgdHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm0oc3RhdGUpO1xuICAgICAgfSlcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVSYW5kb20od2l0aERhdGEpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgIGlkOiB1dWlkLnY0KCksXG4gICAgd2lkdGg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgwMCArIDIwMCksXG4gICAgY29sb3I6ICcjJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cigtNiksXG4gIH0sIHdpdGhEYXRhKTtcbn1cblxuZnVuY3Rpb24gc2VlZFN0YXRlKCkge1xuICBsZXQgbW9kZWwgPSBjcmVhdGVSYW5kb20oKTtcbiAgbGV0IHN0YXRlID0ge1xuICAgIFttb2RlbC5pZF06IG1vZGVsLFxuICB9O1xuICByZXR1cm4gc3RhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kZWw7IiwicmVxdWlyZShcIm9iamVjdC5hc3NpZ25cIikuc2hpbSgpO1xuXG5jb25zb2xlLmVycm9yID0gY29uc29sZS5sb2c7IiwiLy8gSU1QT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IHNvcnRCeSA9IHJlcXVpcmUoXCJsb2Rhc2guc29ydGJ5XCIpO1xubGV0IHZhbHVlcyA9IHJlcXVpcmUoXCJsb2Rhc2gudmFsdWVzXCIpO1xubGV0IEN5Y2xlID0gcmVxdWlyZShcImN5Y2xlanNcIik7XG5sZXQge1J4LCBofSA9IEN5Y2xlO1xubGV0IEZvb3RlciA9IHJlcXVpcmUoXCIuL2Zvb3RlclwiKTtcbmxldCBJdGVtID0gcmVxdWlyZShcIi4vaXRlbVwiKTtcblxuLy8gRVhQT1JUUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubGV0IFZpZXcgPSBDeWNsZS5jcmVhdGVWaWV3KE1vZGVsID0+IHtcbiAgbGV0IHN0YXRlJCA9IE1vZGVsLmdldChcInN0YXRlJFwiKTtcbiAgcmV0dXJuIHtcbiAgICB2dHJlZSQ6IHN0YXRlJC5tYXAobW9kZWxzID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGgoJ2RpdicsIHtjbGFzc05hbWU6IFwiZXZlcnl0aGluZ1wifSwgW1xuICAgICAgICAgIGgoJ2RpdicsIHtjbGFzc05hbWU6IFwidG9wQnV0dG9uc1wifSwgW1xuICAgICAgICAgICAgaCgnYnV0dG9uJywge2NsYXNzTmFtZTogXCJhZGRcIn0sIFtcIkFkZCBSYW5kb21cIl0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgaCgnZGl2JywgbnVsbCwgW1xuICAgICAgICAgICAgc29ydEJ5KHZhbHVlcyhtb2RlbHMpLCBtb2RlbCA9PiBtb2RlbC5pZCkubWFwKG1vZGVsID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGgoXCJJdGVtLml0ZW1cIiwge2lkOiBtb2RlbC5pZCwgd2lkdGg6IG1vZGVsLndpZHRoLCBjb2xvcjogbW9kZWwuY29sb3IsIGtleTogbW9kZWwuaWR9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgaChcIkZvb3RlclwiKVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9KSxcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXc7Il19
