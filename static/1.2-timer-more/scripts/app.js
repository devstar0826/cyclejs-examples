(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
require("../../common/scripts/shims");
var makeClass = require("classnames");
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// APP =============================================================================================
var Model = Cycle.createModel(function (Intent) {
  var started = Date.now();
  var control$ = Rx.Observable.merge(Intent.get("continue$"), Intent.get("pause$").map(function () {
    return false;
  }));
  return {
    msSinceStart$: Rx.Observable.interval(100).map(function () {
      return Date.now() - started;
    }).pausable(control$.startWith(true)).takeUntil(Intent.get("stop$")),

    stopped$: Intent.get("stop$").startWith(false) };
});

var View = Cycle.createView(function (Model) {
  return {
    vtree$: Rx.Observable.combineLatest(Model.get("msSinceStart$"), Model.get("stopped$"), function (msSinceStart, stopped) {
      var timeDelta = (msSinceStart / 1000).toFixed(1);
      return h("div", null, [h("p", { className: makeClass({ muted: stopped }) }, ["Started ", timeDelta, " seconds ago ", stopped ? "(Timer stopped)" : ""]), h("div", { className: "btn-group" }, [h("button", { className: "btn btn-default pause", disabled: stopped }, ["Pause"]), h("button", { className: "btn btn-default continue", disabled: stopped }, ["Continue"]), h("button", { className: "btn btn-default stop", disabled: stopped }, ["Stop"])])]);
    }) };
});

var Intent = Cycle.createIntent(function (User) {
  return {
    pause$: User.event$(".btn.pause", "click").map(function () {
      return true;
    }),
    continue$: User.event$(".btn.continue", "click").map(function () {
      return true;
    }),
    stop$: User.event$(".btn.stop", "click").map(function () {
      return true;
    }) };
});

var User = Cycle.createDOMUser("main");

User.inject(View).inject(Model).inject(Intent).inject(User);

},{"../../common/scripts/shims":2,"classnames":"classnames","cyclejs":"cyclejs"}],2:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
require("babel/polyfill");

// SHIMS ===========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

Cycle.latest = function (DataNode, keys, resultSelector) {
  var observables = keys.map(function (key) {
    return DataNode.get(key);
  });
  var args = observables.concat([function selector() {
    for (var _len = arguments.length, list = Array(_len), _key = 0; _key < _len; _key++) {
      list[_key] = arguments[_key];
    }

    var model = keys.reduce(function (model, key) {
      model[key.slice(0, -1)] = list[keys.indexOf(key)];
      return model;
    }, {});
    return resultSelector(model);
  }]);
  return Rx.Observable.combineLatest.apply(null, args);
};

console.spy = function spy() {
  var _console$log;

  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
    params[_key] = arguments[_key];
  }

  return (_console$log = console.log).bind.apply(_console$log, [console].concat(params));
};

},{"babel/polyfill":"babel/polyfill","cyclejs":"cyclejs"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
