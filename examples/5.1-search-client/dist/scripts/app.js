(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

require("./shims");

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Model = require("./model");
var View = require("./view");
var Intent = require("./intent");

// APP =============================================================================================
var User = Cycle.createDOMUser("main");

User.inject(View).inject(Model).inject(Intent).inject(User);

},{"./intent":2,"./model":3,"./shims":4,"./view":5,"cyclejs":"cyclejs"}],2:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Intent = Cycle.createIntent(function (User) {
  return {
    changeQuery$: User.event$(".query", "input").map(function (event) {
      return event.target.value.trim();
    }) };
});

module.exports = Intent;

},{"cyclejs":"cyclejs"}],3:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;

// EXPORTS =========================================================================================
var Model = Cycle.createModel(function (Intent) {
  return {
    query$: Intent.get("changeQuery$").startWith(""),

    data$: Rx.Observable["return"]([{ name: "Angular", url: "https://angularjs.org/" }, { name: "Backbone", url: "http://documentcloud.github.io/backbone/" }, { name: "Cycle", url: "https://github.com/staltz/cycle" }, { name: "Dojo", url: "http://dojotoolkit.org/" }, { name: "Ember", url: "http://emberjs.com/" }, { name: "Express", url: "http://expressjs.com/" }, { name: "jQuery", url: "http://jquery.com/" }, { name: "Knockout.js", url: "http://knockoutjs.com/" }, { name: "Koa", url: "http://koajs.com/" }, { name: "Lodash", url: "http://lodash.com/" }, { name: "Moment", url: "http://momentjs.com/" }, { name: "Mootools", url: "http://mootools.net/" }, { name: "Prototype", url: "http://www.prototypejs.org/" }, { name: "React", url: "http://facebook.github.io/react/" }, { name: "Underscore", url: "http://documentcloud.github.io/underscore/" }]) };
});

module.exports = Model;

},{"cyclejs":"cyclejs"}],4:[function(require,module,exports){
"use strict";

require("object.assign").shim();

console.error = console.log;

},{"object.assign":"object.assign"}],5:[function(require,module,exports){
"use strict";

// IMPORTS =========================================================================================
var Cycle = require("cyclejs");
var Rx = Cycle.Rx;
var h = Cycle.h;

// EXPORTS =========================================================================================
var View = Cycle.createView(function (Model) {
  var query$ = Model.get("query$");
  var data$ = Model.get("data$");
  return {
    vtree$: data$.combineLatest(query$, function (data, query) {
      var effectiveQuery = query.toLowerCase();
      var items = query ? data.filter(function (obj) {
        return obj.name.toLowerCase().match(effectiveQuery);
      }) : data;
      return h("div", null, [h("input", { className: "query", type: "text", value: query, placeholder: "Type here" }), h("ul", null, [items.map(function (obj) {
        return h("li", null, [obj.name, " ", h("a", { href: obj.url }, [obj.name])]);
      })])]);
    }) };
});

module.exports = View;

},{"cyclejs":"cyclejs"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
